name: Java CI with Maven

# 워크플로우 트리거 설정
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  test:
    runs-on: ubuntu-latest  # 최신 Ubuntu 가상 환경 설정

    steps:
      # 1. 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v3
        # GitHub Actions가 저장소의 코드를 가져옵니다.

      # 2. JDK 17 설정
      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # JDK 배포판 지정 (선택 사항)
          java-version: '17'
        # Java 17 버전의 JDK 설정. Maven을 통해 테스트를 실행할 Java 환경을 준비합니다.

      # 3. Maven 의존성 캐싱
      - name: Maven 패키지 캐시
        uses: actions/cache@v3  # 최신 버전으로 업데이트
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
        # Maven의 .m2/repository 디렉토리를 캐시하여 의존성 다운로드 시간을 줄입니다.

      # 4. 테스트 실행 및 코드 커버리지 리포트 생성
      - name: 테스트 실행 및 코드 커버리지 리포트
        run: mvn test jacoco:report
        # Maven을 사용해 테스트를 실행하고 JaCoCo를 통해 코드 커버리지 리포트를 생성합니다.

      # 5. 코드 커버리지 리포트 업로드
      - name: 코드 커버리지 리포트 업로드
        uses: actions/upload-artifact@v3  # 최신 버전으로 업데이트
        with:
          name: code-coverage-report
          path: target/site/jacoco
        # 생성된 JaCoCo 리포트를 GitHub Actions의 아티팩트로 업로드합니다.

      # 6. 코드 커버리지 결과 PR에 표시
      - name: 코드 커버리지 결과 PR에 표시
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const xml2js = require('xml2js');
            const parser = new xml2js.Parser();

            fs.readFile('target/site/jacoco/jacoco.xml', (err, data) => {
              if (err) {
                console.error('JaCoCo 리포트를 읽는 중 오류 발생:', err);
                return;
              }

              parser.parseString(data, (err, result) => {
                if (err) {
                  console.error('JaCoCo 리포트를 파싱하는 중 오류 발생:', err);
                  return;
                }

                const counters = result.report.counter;
                let covered = 0;
                let missed = 0;

                counters.forEach(counter => {
                  if (counter.$.type === 'LINE') {
                    covered = parseInt(counter.$.covered);
                    missed = parseInt(counter.$.missed);
                  }
                });

                const total = covered + missed;
                const coverage = total > 0 ? ((covered / total) * 100).toFixed(2) : '0.00';

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `### 테스트 및 코드 커버리지 결과\n- 커버리지: ${coverage}%`
                });
              });
            });
        # JaCoCo XML 리포트를 파싱하여 커버리지 퍼센티지를 계산하고 이를 PR에 댓글로 표시합니다.

      # 7. 테스트 실패 시 PR에 알림
      - name: 테스트 실패 알림
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ 테스트 실패: 코드 커버리지가 부족하거나 문제가 발생했습니다.'
            });
        # 테스트 실패 시 PR에 알림을 남겨 작성자가 문제를 빠르게 확인할 수 있도록 합니다.
